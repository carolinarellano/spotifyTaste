import pandas as pd
import matplotlib.pyplot as plt
import streamlit as st
from skimage import io

# Make page full size
st.set_page_config(layout="wide")

# Custom CSS for gradient background
st.markdown(
    """
    <style>
    .stApp {
        background: #191414;
        height: 100vh;
        width: 100%;
        position: absolute;
        z-index: -1;
    }
    </style>
    """,
    unsafe_allow_html=True
)


# Configuraci√≥n de estilo de fondo acorde a Spotify
st.markdown(
    """
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@700&display=swap');
    .header {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-top: 20px;
    }
    .title {
        color: green;
        text-align: center;
        font-size: 60px;
        font-family: 'Montserrat', sans-serif;
    }
    h1 {
        color: white !important;}
    .subtitles{
        color: #1DB954 !important;
        text-align: center;
        font-size: 40px;
        font-family: 'Montserrat', sans-serif;
    }
    .topic{
        color: #1DB954 !important;
        text-align: left;
        font-size: 20px;
        font-family: 'Montserrat', sans-serif;
    }
    .topic1{
        color: palegreen !important;
        text-align: left;
        font-size: 20px;
        font-family: 'Montserrat', sans-serif;
    }
    .members {
        text-align: center;
        color: white !important;
    }
    .text{
        text-align: justify;
        color: white !important;
    }
    ul {
        color: white !important;
    }
    p {
        color: white !important;
    }
    .navbar {
    position: fixed;
    top: 0;
    width: 100%;
    background-color: #1DB954;
    z-index: 10;
    text-align: center;
    padding: 10px;
    }
    .navbar a {
        color: white;
        margin: 0 15px;
        text-decoration: none;
        font-weight: bold;
    }
    </style>
    """,
    unsafe_allow_html=True
)


# Cargar im√°genes
Logo = io.imread(r'./img/ITESO_Logo.png')
Spotify = io.imread(r'./img/Taste.png')
DecisionTree = io.imread(r'./forStreamLit/decision_tree1.png')
acuraccyDT = io.imread(r'./forStreamLit/acuraccyDTree.png')
Knn = io.imread(r'./forStreamLit/KnnModel.png')
acuraccyKnn = io.imread(r'./forStreamLit/acuraccyKnn.png')

# Centering the content
# st.markdown('<h1 class="title" style="color:black;">Spotify Taste</h1>', unsafe_allow_html=True)
cols = st.columns([1, 2, 1])
with cols[1]:
   st.image(Spotify, width=1500)

st.markdown("<hr>", unsafe_allow_html=True)

st.markdown('<h1 class="title" style="color:white; font-size:20px">Equipo</h1>',unsafe_allow_html=True)
st.markdown("""<br><p class="members">\n</p>
<p class="members">1. Yochabel Mart√≠nez C√°zares 738438 ISC\n</p>
<p class="members">2. Ana Carolina Arellano Valdez 738422 ISC\n</p>
<p class="members">3. Axel Leonardo Fern√°ndez Albarran 739878 ISC\n</p><BR>""",unsafe_allow_html=True)


tabs = st.tabs(["üéµ Entendimiento del negocio", "üéß Preparaci√≥n de datos", "üéπ Modelado de datos", "üìùPruebas"])
with tabs[0]:
        # Crear columnas
    col1, col2, col3 = st.columns(3)

    # Primera columna
    with col1:
        st.markdown(
            """
            <div style="display: flex; justify-content: center; margin-top: 150px">
                <img src="https://upload.wikimedia.org/wikipedia/commons/7/7c/Kaggle_logo.png" width="400">
            </div>
            """,
            unsafe_allow_html=True,
        )

    # Segunda columna
    with col2:
        st.markdown(
            """
            <div style="display: flex; justify-content: center;">
                <img src="https://cdoyle.me/content/images/size/w960/2024/01/spotify.png" width="600">
            </div>
            """,
            unsafe_allow_html=True,
        )
    
    st.caption("Kaggle and Spotify for Developers")


    st.markdown('<h2 class="topic">Problema de Negocio</h2>',unsafe_allow_html=True)
    st.markdown("<p class='text'>Optimizaci√≥n de recomendaciones musicales.</p>",unsafe_allow_html=True)
    st.markdown("""<p class='text'>Aumentar la satisfacci√≥n del usuario en Spotify mediante la mejora del sistema de recomendaciones musicales considerando los estados de √°nimo actuales de los usuarios, ofreciendo sugerencias de canciones m√°s alineadas con sus necesidades emocionales en tiempo real.</p>
                <h2 class="topic">Problema de Miner√≠a de Datos</h2>
                <p class='text'>Desarrollar un modelo de recomendaci√≥n que en base b√∫squeda de patrones, sugiera canciones basadas en el estado de √°nimo actual del usuario, mejorando la precisi√≥n y relevancia de las recomendaciones personales musicales en la plataforma Spotify.</p>""", unsafe_allow_html=True)
    
    st.markdown("""
            <h2 class="topic" style="color: ">Entendimiento de los datos</h2>
            <h2 class="topic1">Dataset</h2>
            <p class='text'>El Dataset a utilizar es desde el archivo 278k_song_labelled.csv, lo obtuvimos de kaggle, y esta informaci√≥n se puede obtener directamente de Spotify for Developers, este es un registro de aproximadamente 277938 canciones, el cual contiene la informaci√≥n correspondiente a cada canci√≥n distribuida en 13 columnas, estos datos son:\n
            - duration (ms): duraci√≥n de la canci√≥n, valores enteros
            - danceability: qu√© tan bailable es una canci√≥n, valores flotantes entre 0.0 y 1.0, el cual se calcula con base en el tempo, la estabilidad del ritmo y la actividad, 0.0 representando lo menos bailable y 1.0 lo m√°s bailable. 
            - energy: qu√© tan energ√©tica es una canci√≥n, valores flotantes entre 0.0 y 1.0, este se calcula a partir de las caracter√≠sticas de una canci√≥n, si es r√°pida, ruidosa o fuerte y con estos mismos se representa la intensidad de la canci√≥n.
            - loudness: qu√© tan ruidosa es una canci√≥n, valores flotantes basados en los decibeles que tiene, este valor puede ir desde -60 dB hasta 0 dB.
            - spechiness: detecta la presencia de palabras habladas en la pista, valores flotantes que van desde 0.33 a 0.66
            - acousticness: este valor se representa igualmente con flotantes que van desde 0.0 a 1.0
            - instrumentalness: predice si una canci√≥n no contiene voces, en este contexto, las palabras ‚Äúoh‚Äù, ‚Äúah‚Äù cuentan como instrumental. De igual manera est√° descrito con valores flotantes de entre 0.0 a 1.0, si una canci√≥n tiene instrumentalidad que supera el 0.5 es contado como instrumental.
            - valence: este valor representa la positividad de una canci√≥n, este valor es representado con flotantes entre 0.0 y 1.0, mientras una valencia es m√°s baja puede considerarse como triste o depresiva, mientras que si es un valor m√°s cercano a uno representa una canci√≥n m√°s euf√≥rica o alegre
            - tempo: valores flotantes, que representan las pulsaciones por minuto (PPM) de la canci√≥n, este t√©rmino musical describe el ritmo de una canci√≥n.
            - spec_rate: este valor representa el muestreo espectral, se utiliza para saber si la calidad de una canci√≥n es buena o no, de igual describe este dato con flotantes, sin embargo, para este proyecto no ser√° necesario utilizar este dato.
            - labels: contiene el g√©nero o categor√≠a al que se le relaciona, las cuales son
                - happy (1) 
                - sad (0)
                - calm (3)
                - energetic (2).

            Estos datos son muy importantes para nuestro problema de negocio, pues a trav√©s de un an√°lisis de caracter√≠sticas de las canciones que el usuario escuche, se podr√°n recomendar canciones con caracter√≠sticas similares, de manera que el usuario tendr√° una mejor satisfacci√≥n al recibir recomendaciones a trav√©s de Spotify.
            </p>
            
            <h2 class="topic1">Inconsistencias</h2>
            <p class='text'>En general este Dataset est√° muy completo, no encontramos inconsistencias de datos, no hay datos nulos ni duplicados, lo cual nos permitir√° realizar un an√°lisis de datos bastante completo.</p>
            
            <hr>
            
            """,unsafe_allow_html=True)

with tabs[1]:
    st.markdown("""
            <h2 class="subtitles">Preparacion de los Datos</h2>
            <h2 class="topic1">Selecci√≥n y Limpieza</h2>
            <p class='text'> 
                En general este Dataset est√° muy completo, no encontramos inconsistencias de datos, no hay datos nulos ni duplicados, lo cual nos permitir√° realizar un an√°lisis de datos bastante completo.\n
            </p>    
            <p class='text'> 
                Las t√©cnicas que utilizamos seleccionar y limpiar los datos que queremos obtener del Dataset fueron:\n
            </p>
            <p class='text'> 
                1. Carga de datos: cargamos los dos archivos .csv y los concatenamos, para despu√©s eliminar columnas repetidas.
            </p>
            <p class='text'> 
                2. Dataframe: covertimos los datos cargados en un Dataframe para poder manipular los datos.</li>
            </p>
            <p class='text'> 
                3. Drop de datos innecesarios, como lo mencionamos en la descripci√≥n de datos, la columna spec_rate no ser√≠a relevante para el proyecto, por lo que optamos por eliminarla.</li>
            </p>
            <p class='text'> 
                4. Rename: renombramos la columna ‚ÄúUnnamed: 0‚Äù por ‚Äúsong index‚Äù para ser m√°s descriptivos con el dato de √≠ndice que nos brinda esta columna, adem√°s, renombramos la columna ‚Äúlabels‚Äù por ‚Äúmood‚Äù, ya que indica con √≠ndice la emoci√≥n correspondiente.</li>
            </p>
            <p class='text'> 
                5. Creaci√≥n de una nueva columna: ya que queremos que nuestros datos sean m√°s claros, creamos una nueva columna la cual dice la duraci√≥n de las canciones en minutos y segundos.</li>
            </p>
            <p class='text'> 
                a.	Primero copiamos los datos de ‚Äúduration (ms)‚Äù a la columna ‚Äúduration (mm:ss)‚Äù convirt√©ndolos a timedelta
            </p>
            <p class='text'> 
                b.	Despu√©s aplicamos una funci√≥n lambda que permite que se muestre el tiempo en un formato de minutos y segundos.
            </p>
            <p class='text'> 
                6.	Set index: utilizamos la columna ‚Äúsong index‚Äù como la columna de √≠ndice para este dataframe.
            </p>
            """,unsafe_allow_html=True)
    st.markdown("""
            <h2 class="topic">Integracion y transformacion de datos</h2>
            <p class='text'> 
                        Concatenamos ambos archivos csv para obtener los datos relacionados con la uri y los labels, adem√°s de eliminar las columnas duplicadas.
        Renombramos las columnas para manipularlas de mejor manera.
        Creamos una nueva columna que contiene la duraci√≥n de la canci√≥n en minutos y segundos para poder interpretarla de mejor manera.
        Mapeamos los estados de √°nimo a valores num√©ricos para poder manipularlos de mejor manera.
        Indicamos el √≠ndice de la canci√≥n.
            </p>
            """,unsafe_allow_html=True)


    # Cargamos el Dataset
    data = pd.concat([pd.read_csv('./data/278k_song_labelled.csv'),
                    pd.read_csv('./data/278k_labelled_uri.csv')], axis=1)

    # Convertimos los datos a un DataFrame
    df = pd.DataFrame(data)
    st.markdown('<h2 class="topic1">Dataset Original</h2>',unsafe_allow_html=True)

    # Eliminamos las columnas repetidas
    df = df.loc[:,~df.columns.duplicated()]

    # Eliminamos Unnamed: 0.1
    df = df.drop(['Unnamed: 0.1'], axis=1)

    st.write(df)

    # Al no haber datos nulos, podemos continuar con la preparaci√≥n de los datos
    # No utilizaremos las columnas de spec_rate y labels, por lo que las eliminamos
    df = df.drop(['spec_rate'], axis=1)

    # Renombramos columnas para manipularlas
    df = df.rename(columns={ 'Unnamed: 0': 'track index', 'uri': 'track uri', 'labels': 'mood'})

    # Creamos una nueva columna que contiene la duracion la cancion en minutos y segundos para poder interpretarla de mejor manera, sin embargo seguiremos utilizando los ms para el analisis de los datos
    df['duration (mm:ss)'] = pd.to_timedelta(df['duration (ms)'], unit='ms')
    # utilizamos una funcion lambda para que la duracion solo muestre minutos y segundos
    df['duration (mm:ss)'] = df['duration (mm:ss)'].apply(lambda x: f'{int(x.total_seconds() // 60):02d}:{int(x.total_seconds() % 60):02d}')

    # Hacemos un diccionario para mapear los estados de animo a valores numericos
    emotions_mapping = {'sad': 0, 'happy': 1, 'energetic': 2, 'calm': 3}
    # Invertimos el mapeo para poder interpretar los datos
    inverted_emotions_mapping = {v: k for k, v in emotions_mapping.items()}
    # Mapeamos los estados de animo a valores numericos
    df['mood'] = df['mood'].map(inverted_emotions_mapping)

    # indicamos el indice de la cancion
    df.set_index('track index', inplace=True)

    st.markdown("""
                ```python
                    # Cargamos el Dataset
                    data = pd.concat([pd.read_csv('./data/278k_song_labelled.csv'),
                                    pd.read_csv('./data/278k_labelled_uri.csv')], axis=1)

                    # Convertimos los datos a un DataFrame
                    df = pd.DataFrame(data)

                    # Eliminamos las columnas repetidas
                    df = df.loc[:,~df.columns.duplicated()]

                    # Eliminamos Unnamed: 0.1
                    df = df.drop(['Unnamed: 0.1'], axis=1)

                    # Al no haber datos nulos, podemos continuar con la preparaci√≥n de los datos
                    # No utilizaremos las columnas de spec_rate y labels, por lo que las eliminamos
                    df = df.drop(['spec_rate'], axis=1)
                    # Renombramos columnas para manipularlas
                    df = df.rename(columns={ 'Unnamed: 0': 'track index', 'uri': 'track uri', 'labels': 'mood'})

                    # Creamos una nueva columna que contiene la duracion la cancion en minutos y segundos para poder interpretarla de mejor manera, sin embargo seguiremos utilizando los ms para el analisis de los datos
                    df['duration (mm:ss)'] = pd.to_timedelta(df['duration (ms)'], unit='ms')
                    # utilizamos una funcion lambda para que la duracion solo muestre minutos y segundos
                    df['duration (mm:ss)'] = df['duration (mm:ss)'].apply(lambda x: f'{int(x.total_seconds() // 60):02d}:{int(x.total_seconds() % 60):02d}')
                    # utilizamos la funcion lambda para indicar que mood representa el estado de animo de la cancion
                    display(df)

                    # Hacemos un diccionario para mapear los estados de animo a valores numericos
                    emotions_mapping = {'sad': 0, 'happy': 1, 'energetic': 2, 'calm': 3}
                    # Invertimos el mapeo para poder interpretar los datos
                    inverted_emotions_mapping = {v: k for k, v in emotions_mapping.items()}
                    # Mapeamos los estados de animo a valores numericos
                    df['mood'] = df['mood'].map(inverted_emotions_mapping)

                    # indicamos el indice de la cancion
                    df.set_index('track index', inplace=True)
                """)

    st.write('<h1 class="topic">Resultado del procedimiento</h1>',unsafe_allow_html=True)
    # Mostrar DataFrame
    st.write('<h1 class="topic1" >DataFrame</h1>',unsafe_allow_html=True)
    st.write(df)


    # Gr√°ficos de caracter√≠sticas
    st.write('<h1 class="topic"> Gr√°ficas de datos despu√©s del procesamiento</h1>', unsafe_allow_html=True)
    st.write('Para mostrar las gr√°ficas, se ha limitado el conjunto de datos a 1000 registros')
    df_graphics = df.head(1000)

    # Visualizaci√≥n de caracter√≠sticas
    attributes = ['danceability', 'energy', 'loudness', 'speechiness', 'acousticness', 'instrumentalness', 'liveness', 'valence', 'tempo']

    fig, axs = plt.subplots(3, 3, figsize=(10, 6))
    axs = axs.flatten()  # Aplanar la matriz de ejes para acceder m√°s f√°cilmente

    colors = ['crimson', 'tomato', 'darkturquoise', 'palegreen', 'gold', 'dodgerblue', 'violet', 'cornflowerblue', 'mediumvioletred']
    for i, attribute in enumerate(attributes):
        axs[i].bar(df_graphics.index, df_graphics[attribute], color=colors[i])
        axs[i].set_title(attribute)
        axs[i].set_ylabel(attribute)
        axs[i].tick_params(axis='x', rotation=45)

    plt.tight_layout()
    st.pyplot(fig)


    st.write('## :green[Datos clasificados por mood]')
    fig, axs = plt.subplots(3, 3, figsize=(8, 8))
    for mood in df['mood'].unique():
        plt.figure(figsize=(14, 8))
        for i, attribute in enumerate(attributes):
            plt.subplot(3, 3, i + 1)
            plt.hist(df[df['mood'] == mood][attribute], bins=20, color=colors[i])
            plt.title(attribute)
            plt.ylabel(attribute)
            plt.xticks(rotation=45)
        
        plt.suptitle(mood.upper(), fontsize=16)  # T√≠tulo principal con el valor de 'mood'
        plt.subplots_adjust(top=0.85)  # Ajusta para que no se superpongan el t√≠tulo y las gr√°ficas
        plt.tight_layout(rect=[0, 0, 1, 0.95])  # Deja espacio para el t√≠tulo
        st.pyplot(plt)
    
with tabs[2]:
    with st.spinner("Procesando datos, por favor espera..."):
        st.success("¬°Datos procesados exitosamente!")
    st.markdown('''
                <h1 class="topic" style="color:white"; font-size:"20px">Modelado de los datos</h1>
                <p class="text"> 
                    En esta etapa, se implementaron al menos dos modelos de clasificaci√≥n para abordar el problema de 
                    predicci√≥n de si a un usuario le gustar√° una canci√≥n basada en sus playlists. Los modelos seleccionados son
                </p>
                <h2 class="topic1" font-size:"20px">Arbol de decisiones</h2>
                <p class="text"> 
                    Un modelo de clasificaci√≥n que se basa en la creaci√≥n de un √°rbol de decisiones que se utiliza para predecir la clase 
                    de un objeto. El √°rbol de decisi√≥n se construye de manera recursiva, dividiendo el conjunto de datos en subconjuntos 
                    m√°s peque√±os y m√°s homog√©neos.
                </p>
                ''',unsafe_allow_html=True)
    st.image(DecisionTree, use_column_width=True, caption="√Årbol de toma de decisiones")
    cols = st.columns([1, 2, 1])
    with cols[1]:
        st.image(acuraccyDT,use_column_width=True,caption="Efectividad del modelo")
        
    st.markdown('''
                <h2 class="topic1" style="text-align:center;" >Analisis de los resultados</h2>
                <p class="text" style="text-align:justify; width:50%; margin:auto; display:block;"> 
                    Estos resultados representan que el modelo es confiable para clasificar canciones seg√∫n estados de √°nimo, con un desempe√±o s√≥lido pero que 
                    podr√≠a mejorarse para las clases m√°s complejas como "happy" o "sad". "Calm" es la clase mejor clasificada con alta precisi√≥n y recall, mientras 
                    que "happy" y "sad" muestran algo m√°s de error.
                </p>
                <br>
                <br>
                <h2 class="topic1" style="text-align:center;" >KNN</h2>
                <p class="text" style="text-align:justify; width:90%; margin:auto; display:block;"> 
                    El modelo KNN tambi√©n se utiliza para clasificaci√≥n, pero a diferencia del √°rbol de decisiones, KNN no tiene una estructura jer√°rquica; simplemente 
                    encuentra los puntos m√°s cercanos (por proximidad) a una canci√≥n desconocida y le asigna el mood mayoritario de esos puntos cercanos.
                </p>
                <br>
                <br>

                ''',unsafe_allow_html=True)

    col1, col2 = st.columns(2)

    # Mostrar la primera imagen en la primera columna
    with col1:
        st.image(Knn, use_column_width=True, caption="Modelo de KNN vecinos")

    # Mostrar la segunda imagen en la segunda columna
    with col2:
        st.markdown('<br><br>', unsafe_allow_html=True)
        st.image(acuraccyKnn, use_column_width=True, caption="Efectividad del modelo")

with tabs[3]:
    st.markdown("<h3 style='text-align: center; color: white;'>Estados de √°nimo de las playlist de Caro</h3>", unsafe_allow_html=True)

    # Cargar im√°genes
    graficapastel1 = io.imread(r'./img/GraficaPastel1.png')
    graficapastel2 = io.imread(r'./img/GraficaPastel2.png')
    graficapastel3 = io.imread(r'./img/GraficaPastel3.png')
    graficapastel4 = io.imread(r'./img/GraficaPastel4.png')

    # Mostrar im√°genes con descripciones
    col1, col2 = st.columns(2)

    # Primera columna
    with col1:
        st.image(graficapastel1, use_column_width=True, caption="Distribuci√≥n inicial: Estado de √°nimo 1")
        st.image(graficapastel3, use_column_width=True, caption="Distribuci√≥n ajustada: Estado de √°nimo 3")

    # Segunda columna
    with col2:
        st.image(graficapastel2, use_column_width=True, caption="Distribuci√≥n ajustada: Estado de √°nimo 2")
        st.image(graficapastel4, use_column_width=True, caption="Distribuci√≥n final: Estado de √°nimo 4")

    st.markdown("<p style='text-align: center; color: white;'>Estas distribuciones muestran la variaci√≥n en los estados de √°nimo en diferentes etapas del an√°lisis.</p>", unsafe_allow_html=True)

    st.markdown("<h3 style='text-align: center; color: white;'>Estados de √°nimo de las playlist de Yochi</h3>", unsafe_allow_html=True)

    # Cargar im√°genes
    #graficapastel1 = io.imread(r'./img/GraficaPastel1.png')
    #graficapastel2 = io.imread(r'./img/GraficaPastel2.png')
    #graficapastel3 = io.imread(r'./img/GraficaPastel3.png')
    #graficapastel4 = io.imread(r'./img/GraficaPastel4.png')
    # Primera columna
    #with col1:
    #    st.image(graficapastel1, use_column_width=True, caption="Distribuci√≥n inicial: Estado de √°nimo 1")
    #    st.image(graficapastel3, use_column_width=True, caption="Distribuci√≥n ajustada: Estado de √°nimo 3")

    # Segunda columna
    #with col2:
    #    st.image(graficapastel2, use_column_width=True, caption="Distribuci√≥n ajustada: Estado de √°nimo 2")
    #    st.image(graficapastel4, use_column_width=True, caption="Distribuci√≥n final: Estado de √°nimo 4")